// DO NOT EDIT: This file is automatically generated by Rational XDE Tester.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>ClassicsJavaA</b><br>
 * Generated     : <b>2005/05/09 10:30:26</b><br>
 * Description   : Helper class for XDE Tester Script<br>
 * Original Host : Windows XP x86 5.1 <br>
 * 
 * @since  maj 09, 2005
 * @author Kristian Karl
 */
public abstract class ClassicsJavaAHelper extends RationalTestScript
{
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderlogon
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderlogon
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel2"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel2"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-statuslogon2
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel3"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-statuslogon2
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel3"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderForm
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel4() 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel4"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderForm
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Cancel4(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("Cancel4"), anchor, flags);
	}
	
	/**
	 * ClassicsJava: with default state.
	 *		.captionText : ClassicsCD
	 * 		accessibleContext.accessibleRole : ram
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject ClassicsJava() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("ClassicsJava"));
	}
	/**
	 * ClassicsJava: with specific test context and state.
	 *		.captionText : ClassicsCD
	 * 		accessibleContext.accessibleRole : ram
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject ClassicsJava(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("ClassicsJava"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close2
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Close() 
	{
		return new GuiTestObject(
                        getMappedTestObject("Close"));
	}
	/**
	 * Close: with specific test context and state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close2
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Close(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("Close"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close-order
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Close2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("Close2"));
	}
	/**
	 * Close: with specific test context and state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close-order
	 * 		.classIndex : 1
	 */
	protected GuiTestObject Close2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("Close2"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK() 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK"));
	}
	/**
	 * OK: with specific test context and state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		.priorLabel : Classics Java Version 1.0 Build A:  A Rational Software Demo Application
	 * 		accessibleContext.accessibleName : OK
	 * 		name : but
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK2"));
	}
	/**
	 * OK: with specific test context and state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		.priorLabel : Classics Java Version 1.0 Build A:  A Rational Software Demo Application
	 * 		accessibleContext.accessibleName : OK
	 * 		name : but
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK2"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK3"));
	}
	/**
	 * OK: with specific test context and state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK3"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		text : OK
	 * 		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK4() 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK4"));
	}
	/**
	 * OK: with specific test context and state.
	 *		text : OK
	 * 		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK4(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK4"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		text : OK
	 * 		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-statuslogon2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK5() 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK5"));
	}
	/**
	 * OK: with specific test context and state.
	 *		text : OK
	 * 		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-statuslogon2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject OK5(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("OK5"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject PlaceOrder() 
	{
		return new GuiTestObject(
                        getMappedTestObject("PlaceOrder"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject PlaceOrder(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("PlaceOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 0
	 */
	protected GuiTestObject PlaceOrder2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("PlaceOrder2"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		accessibleContext.accessibleRole : knapp
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 0
	 */
	protected GuiTestObject PlaceOrder2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("PlaceOrder2"), anchor, flags);
	}
	
	/**
	 * _000: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $0.00
	 * 		name : relatedPrice
	 * 		.classIndex : 4
	 */
	protected GuiTestObject _000() 
	{
		return new GuiTestObject(
                        getMappedTestObject("_000"));
	}
	/**
	 * _000: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $0.00
	 * 		name : relatedPrice
	 * 		.classIndex : 4
	 */
	protected GuiTestObject _000(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("_000"), anchor, flags);
	}
	
	/**
	 * _100: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $1.00
	 * 		name : shipPrice
	 * 		.classIndex : 7
	 */
	protected GuiTestObject _100() 
	{
		return new GuiTestObject(
                        getMappedTestObject("_100"));
	}
	/**
	 * _100: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $1.00
	 * 		name : shipPrice
	 * 		.classIndex : 7
	 */
	protected GuiTestObject _100(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("_100"), anchor, flags);
	}
	
	/**
	 * _1899: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $18.99
	 * 		name : price
	 * 		.classIndex : 2
	 */
	protected GuiTestObject _1899() 
	{
		return new GuiTestObject(
                        getMappedTestObject("_1899"));
	}
	/**
	 * _1899: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $18.99
	 * 		name : price
	 * 		.classIndex : 2
	 */
	protected GuiTestObject _1899(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("_1899"), anchor, flags);
	}
	
	/**
	 * _1899Text: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : $18.99
	 * 		name : productOrderLabelb
	 * 		.classIndex : 1
	 */
	protected TextGuiSubitemTestObject _1899Text() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("_1899Text"));
	}
	/**
	 * _1899Text: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : $18.99
	 * 		name : productOrderLabelb
	 * 		.classIndex : 1
	 */
	protected TextGuiSubitemTestObject _1899Text(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("_1899Text"), anchor, flags);
	}
	
	/**
	 * _1999: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $19.99
	 * 		name : totalPrice
	 * 		.classIndex : 9
	 */
	protected GuiTestObject _1999() 
	{
		return new GuiTestObject(
                        getMappedTestObject("_1999"));
	}
	/**
	 * _1999: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $19.99
	 * 		name : totalPrice
	 * 		.classIndex : 9
	 */
	protected GuiTestObject _1999(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("_1999"), anchor, flags);
	}
	
	/**
	 * AboutClassicsCD: with default state.
	 *		.captionText : About ClassicsCD
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : About ClassicsCD
	 * 		name : aboutFrame
	 */
	protected TopLevelTestObject aboutClassicsCD() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("aboutClassicsCD"));
	}
	/**
	 * AboutClassicsCD: with specific test context and state.
	 *		.captionText : About ClassicsCD
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : About ClassicsCD
	 * 		name : aboutFrame
	 */
	protected TopLevelTestObject aboutClassicsCD(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("aboutClassicsCD"), anchor, flags);
	}
	
	/**
	 * Administration: with default state.
	 *		.captionText : Administration
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Administration
	 * 		name : logFrame3
	 */
	protected TopLevelTestObject administration() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("administration"));
	}
	/**
	 * Administration: with specific test context and state.
	 *		.captionText : Administration
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Administration
	 * 		name : logFrame3
	 */
	protected TopLevelTestObject administration(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("administration"), anchor, flags);
	}
	
	/**
	 * Administrator: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Administrator
	 * 		name : admin
	 * 		.classIndex : 1
	 */
	protected GuiTestObject administrator() 
	{
		return new GuiTestObject(
                        getMappedTestObject("administrator"));
	}
	/**
	 * Administrator: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Administrator
	 * 		name : admin
	 * 		.classIndex : 1
	 */
	protected GuiTestObject administrator(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("administrator"), anchor, flags);
	}
	
	/**
	 * AreYouSureYouWantToClearAllCusto: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Are you sure you want to clear all customers and orders?  (Products info will no ...
	 * 		name : message
	 * 		.classIndex : 0
	 */
	protected GuiTestObject areYouSureYouWantToClearAllCus() 
	{
		return new GuiTestObject(
                        getMappedTestObject("areYouSureYouWantToClearAllCus"));
	}
	/**
	 * AreYouSureYouWantToClearAllCusto: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Are you sure you want to clear all customers and orders?  (Products info will no ...
	 * 		name : message
	 * 		.classIndex : 0
	 */
	protected GuiTestObject areYouSureYouWantToClearAllCus(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("areYouSureYouWantToClearAllCus"), anchor, flags);
	}
	
	/**
	 * BannerJpg: with default state.
	 *		.class : javax.swing.JLabel
	 * 		iconDescription : Banner.jpg
	 * 		.classIndex : 0
	 */
	protected GuiTestObject bannerJpg() 
	{
		return new GuiTestObject(
                        getMappedTestObject("bannerJpg"));
	}
	/**
	 * BannerJpg: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		iconDescription : Banner.jpg
	 * 		.classIndex : 0
	 */
	protected GuiTestObject bannerJpg(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("bannerJpg"), anchor, flags);
	}
	
	/**
	 * BannerJpg: with default state.
	 *		.class : javax.swing.JLabel
	 * 		iconDescription : Banner.jpg
	 * 		.classIndex : 1
	 */
	protected GuiTestObject bannerJpg2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("bannerJpg2"));
	}
	/**
	 * BannerJpg: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		iconDescription : Banner.jpg
	 * 		.classIndex : 1
	 */
	protected GuiTestObject bannerJpg2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("bannerJpg2"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel
	 * 		.classIndex : 1
	 */
	protected GuiTestObject cancel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel
	 * 		.classIndex : 1
	 */
	protected GuiTestObject cancel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-statuslogon2
	 * 		.classIndex : 1
	 */
	protected GuiTestObject cancel2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel2"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-statuslogon2
	 * 		.classIndex : 1
	 */
	protected GuiTestObject cancel2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel2"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderlogon
	 * 		.classIndex : 1
	 */
	protected GuiTestObject cancel3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel3"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderlogon
	 * 		.classIndex : 1
	 */
	protected GuiTestObject cancel3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel3"), anchor, flags);
	}
	
	/**
	 * Cancel: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderForm
	 * 		.classIndex : 2
	 */
	protected GuiTestObject cancel4() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel4"));
	}
	/**
	 * Cancel: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel
	 * 		name : cancel-orderForm
	 * 		.classIndex : 2
	 */
	protected GuiTestObject cancel4(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancel4"), anchor, flags);
	}
	
	/**
	 * CancelSelectedOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel Selected Order
	 * 		name : cancelOrder-cancelselected
	 * 		.classIndex : 0
	 */
	protected GuiTestObject cancelSelectedOrder() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancelSelectedOrder"));
	}
	/**
	 * CancelSelectedOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Cancel Selected Order
	 * 		name : cancelOrder-cancelselected
	 * 		.classIndex : 0
	 */
	protected GuiTestObject cancelSelectedOrder(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cancelSelectedOrder"), anchor, flags);
	}
	
	/**
	 * CardNumberIncludeTheSpaces: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Card Number (include the spaces):
	 * 		name : cardNumber
	 * 		.classIndex : 10
	 */
	protected GuiTestObject cardNumberIncludeTheSpaces() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpaces"));
	}
	/**
	 * CardNumberIncludeTheSpaces: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Card Number (include the spaces):
	 * 		name : cardNumber
	 * 		.classIndex : 10
	 */
	protected GuiTestObject cardNumberIncludeTheSpaces(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpaces"), anchor, flags);
	}
	
	/**
	 * CardNumberIncludeTheSpacesText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpacesText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpacesText"));
	}
	/**
	 * CardNumberIncludeTheSpacesText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpacesText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpacesText"), anchor, flags);
	}
	
	/**
	 * CardType: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Card Type:
	 * 		name : cardType
	 * 		.classIndex : 11
	 */
	protected GuiTestObject cardType() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cardType"));
	}
	/**
	 * CardType: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Card Type:
	 * 		name : cardType
	 * 		.classIndex : 11
	 */
	protected GuiTestObject cardType(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cardType"), anchor, flags);
	}
	
	/**
	 * ChooseOne: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Choose One: 
	 * 		name : label-chooseone
	 * 		.classIndex : 0
	 */
	protected GuiTestObject chooseOne() 
	{
		return new GuiTestObject(
                        getMappedTestObject("chooseOne"));
	}
	/**
	 * ChooseOne: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Choose One: 
	 * 		name : label-chooseone
	 * 		.classIndex : 0
	 */
	protected GuiTestObject chooseOne(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("chooseOne"), anchor, flags);
	}
	
	/**
	 * CityStateZip: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : City, State, Zip:
	 * 		name : csz
	 * 		.classIndex : 15
	 */
	protected GuiTestObject cityStateZip() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cityStateZip"));
	}
	/**
	 * CityStateZip: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : City, State, Zip:
	 * 		name : csz
	 * 		.classIndex : 15
	 */
	protected GuiTestObject cityStateZip(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cityStateZip"), anchor, flags);
	}
	
	/**
	 * CityStateZipText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : City, State, Zip:
	 * 		name : .cszField
	 * 		.classIndex : 7
	 */
	protected TextGuiSubitemTestObject cityStateZipText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cityStateZipText"));
	}
	/**
	 * CityStateZipText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : City, State, Zip:
	 * 		name : .cszField
	 * 		.classIndex : 7
	 */
	protected TextGuiSubitemTestObject cityStateZipText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cityStateZipText"), anchor, flags);
	}
	
	/**
	 * ClassicsJava: with default state.
	 *		.captionText : ClassicsCD
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject classicsJava() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava"));
	}
	/**
	 * ClassicsJava: with specific test context and state.
	 *		.captionText : ClassicsCD
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject classicsJava(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava"), anchor, flags);
	}
	
	/**
	 * ClassicsJava: with default state.
	 *		.captionText : 
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : 
	 */
	protected TopLevelTestObject classicsJava2() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava2"));
	}
	/**
	 * ClassicsJava: with specific test context and state.
	 *		.captionText : 
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : 
	 */
	protected TopLevelTestObject classicsJava2(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava2"), anchor, flags);
	}
	
	/**
	 * ClassicsJavaVersion10BuildAARati: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Classics Java Version 1.0 Build A:  A Rational Software Demo Application
	 * 		name : lab
	 * 		.classIndex : 0
	 */
	protected GuiTestObject classicsJavaVersion10BuildAARa() 
	{
		return new GuiTestObject(
                        getMappedTestObject("classicsJavaVersion10BuildAARa"));
	}
	/**
	 * ClassicsJavaVersion10BuildAARati: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Classics Java Version 1.0 Build A:  A Rational Software Demo Application
	 * 		name : lab
	 * 		.classIndex : 0
	 */
	protected GuiTestObject classicsJavaVersion10BuildAARa(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("classicsJavaVersion10BuildAARa"), anchor, flags);
	}
	
	/**
	 * ClearData: with default state.
	 *		.captionText : Clear Data?
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Clear Data?
	 * 		name : clearDataForm
	 */
	protected TopLevelTestObject clearData() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("clearData"));
	}
	/**
	 * ClearData: with specific test context and state.
	 *		.captionText : Clear Data?
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Clear Data?
	 * 		name : clearDataForm
	 */
	protected TopLevelTestObject clearData(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("clearData"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close-order
	 * 		.classIndex : 1
	 */
	protected GuiTestObject close() 
	{
		return new GuiTestObject(
                        getMappedTestObject("close"));
	}
	/**
	 * Close: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close-order
	 * 		.classIndex : 1
	 */
	protected GuiTestObject close(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("close"), anchor, flags);
	}
	
	/**
	 * creditCombo: with default state.
	 *		.itemCount : 3
	 * 		.itemText : {Visa,Amex,Mastercard}
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Card Type:
	 * 		name : creditCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject creditCombo() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("creditCombo"));
	}
	/**
	 * creditCombo: with specific test context and state.
	 *		.itemCount : 3
	 * 		.itemText : {Visa,Amex,Mastercard}
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Card Type:
	 * 		name : creditCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject creditCombo(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("creditCombo"), anchor, flags);
	}
	
	/**
	 * ExistingCustomer: with default state.
	 *		.roleIndex : 1
	 * 		.class : javax.swing.JRadioButton
	 * 		accessibleContext.accessibleName : Existing Customer
	 * 		name : radioButtonB
	 * 		.classIndex : 1
	 */
	protected ToggleGUITestObject existingCustomer() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("existingCustomer"));
	}
	/**
	 * ExistingCustomer: with specific test context and state.
	 *		.roleIndex : 1
	 * 		.class : javax.swing.JRadioButton
	 * 		accessibleContext.accessibleName : Existing Customer
	 * 		name : radioButtonB
	 * 		.classIndex : 1
	 */
	protected ToggleGUITestObject existingCustomer(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("existingCustomer"), anchor, flags);
	}
	
	/**
	 * existingTable: with default state.
	 *		.class : javax.swing.JTable
	 * 		.priorLabel : Order for Trent Culpito
	 * 		name : existingTable
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject existingTable() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("existingTable"));
	}
	/**
	 * existingTable: with specific test context and state.
	 *		.class : javax.swing.JTable
	 * 		.priorLabel : Order for Trent Culpito
	 * 		name : existingTable
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject existingTable(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("existingTable"), anchor, flags);
	}
	
	/**
	 * ExpirationDate: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Expiration Date:
	 * 		name : expire
	 * 		.classIndex : 12
	 */
	protected GuiTestObject expirationDate() 
	{
		return new GuiTestObject(
                        getMappedTestObject("expirationDate"));
	}
	/**
	 * ExpirationDate: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Expiration Date:
	 * 		name : expire
	 * 		.classIndex : 12
	 */
	protected GuiTestObject expirationDate(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("expirationDate"), anchor, flags);
	}
	
	/**
	 * ExpirationDateText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDateText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDateText"));
	}
	/**
	 * ExpirationDateText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDateText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDateText"), anchor, flags);
	}
	
	/**
	 * FullName: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Full Name:
	 * 		name : nameLabel-fullname2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject fullName() 
	{
		return new GuiTestObject(
                        getMappedTestObject("fullName"));
	}
	/**
	 * FullName: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Full Name:
	 * 		name : nameLabel-fullname2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject fullName(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("fullName"), anchor, flags);
	}
	
	/**
	 * FullName: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Full Name:
	 * 		name : nameLabel-fullname
	 * 		.classIndex : 1
	 */
	protected GuiTestObject fullName2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("fullName2"));
	}
	/**
	 * FullName: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Full Name:
	 * 		name : nameLabel-fullname
	 * 		.classIndex : 1
	 */
	protected GuiTestObject fullName2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("fullName2"), anchor, flags);
	}
	
	/**
	 * Item: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Item: 
	 * 		name : label-item
	 * 		.classIndex : 0
	 */
	protected GuiTestObject item() 
	{
		return new GuiTestObject(
                        getMappedTestObject("item"));
	}
	/**
	 * Item: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Item: 
	 * 		name : label-item
	 * 		.classIndex : 0
	 */
	protected GuiTestObject item(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("item"), anchor, flags);
	}
	
	/**
	 * ItemText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Item: 
	 * 		name : productOrderLabel
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject itemText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("itemText"));
	}
	/**
	 * ItemText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Item: 
	 * 		name : productOrderLabel
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject itemText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("itemText"), anchor, flags);
	}
	
	/**
	 * JDialog: with default state.
	 *		.captionText : Incomplete Order
	 * 		.class : javax.swing.JDialog
	 */
	protected TopLevelTestObject jDialog() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("jDialog"));
	}
	/**
	 * JDialog: with specific test context and state.
	 *		.captionText : Incomplete Order
	 * 		.class : javax.swing.JDialog
	 */
	protected TopLevelTestObject jDialog(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("jDialog"), anchor, flags);
	}
	
	/**
	 * JDialog: with default state.
	 *		.captionText : Meddelande
	 * 		.class : javax.swing.JDialog
	 */
	protected TopLevelTestObject jDialog2() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("jDialog2"));
	}
	/**
	 * JDialog: with specific test context and state.
	 *		.captionText : Meddelande
	 * 		.class : javax.swing.JDialog
	 */
	protected TopLevelTestObject jDialog2(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("jDialog2"), anchor, flags);
	}
	
	/**
	 * JLabel: with default state.
	 *		.class : javax.swing.JLabel
	 * 		iconDescription : 
	 * 		.classIndex : 2
	 */
	protected GuiTestObject jLabel() 
	{
		return new GuiTestObject(
                        getMappedTestObject("jLabel"));
	}
	/**
	 * JLabel: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		iconDescription : 
	 * 		.classIndex : 2
	 */
	protected GuiTestObject jLabel(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("jLabel"), anchor, flags);
	}
	
	/**
	 * JOptionPane: with default state.
	 *		.class : javax.swing.JOptionPane
	 * 		.classIndex : 0
	 */
	protected GuiTestObject jOptionPane() 
	{
		return new GuiTestObject(
                        getMappedTestObject("jOptionPane"));
	}
	/**
	 * JOptionPane: with specific test context and state.
	 *		.class : javax.swing.JOptionPane
	 * 		.classIndex : 0
	 */
	protected GuiTestObject jOptionPane(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("jOptionPane"), anchor, flags);
	}
	
	/**
	 * JOptionPane: with default state.
	 *		.class : javax.swing.JOptionPane
	 * 		.classIndex : 0
	 */
	protected GuiTestObject jOptionPane2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("jOptionPane2"));
	}
	/**
	 * JOptionPane: with specific test context and state.
	 *		.class : javax.swing.JOptionPane
	 * 		.classIndex : 0
	 */
	protected GuiTestObject jOptionPane2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("jOptionPane2"), anchor, flags);
	}
	
	/**
	 * JTableHeader: with default state.
	 *		.class : javax.swing.table.JTableHeader
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jTableHeader() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jTableHeader"));
	}
	/**
	 * JTableHeader: with specific test context and state.
	 *		.class : javax.swing.table.JTableHeader
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jTableHeader(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jTableHeader"), anchor, flags);
	}
	
	/**
	 * jmb: with default state.
	 *		.class : javax.swing.JMenuBar
	 * 		name : jmb
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jmb() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jmb"));
	}
	/**
	 * jmb: with specific test context and state.
	 *		.class : javax.swing.JMenuBar
	 * 		name : jmb
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jmb(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jmb"), anchor, flags);
	}
	
	/**
	 * MemberLogon: with default state.
	 *		.captionText : Member Logon
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Member Logon
	 * 		name : logFrame1
	 */
	protected TopLevelTestObject memberLogon() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("memberLogon"));
	}
	/**
	 * MemberLogon: with specific test context and state.
	 *		.captionText : Member Logon
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Member Logon
	 * 		name : logFrame1
	 */
	protected TopLevelTestObject memberLogon(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("memberLogon"), anchor, flags);
	}
	
	/**
	 * menylist: with default state.
	 *		.class : javax.swing.JMenuBar
	 * 		name : jmb
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject menylist() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("menylist"));
	}
	/**
	 * menylist: with specific test context and state.
	 *		.class : javax.swing.JMenuBar
	 * 		name : jmb
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject menylist(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("menylist"), anchor, flags);
	}
	
	/**
	 * Name: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Name:
	 * 		name : name-orderBag
	 * 		.classIndex : 13
	 */
	protected GuiTestObject name() 
	{
		return new GuiTestObject(
                        getMappedTestObject("name"));
	}
	/**
	 * Name: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Name:
	 * 		name : name-orderBag
	 * 		.classIndex : 13
	 */
	protected GuiTestObject name(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("name"), anchor, flags);
	}
	
	/**
	 * nameCombo: with default state.
	 *		.itemCount : 16
	 * 		.itemText : {Trent Culpito,Susan Flontly,Emma Trenchenza,Claire Stratus,Rick Tumbler,Tony Mi ...
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Full Name:
	 * 		name : nameCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject nameCombo() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("nameCombo"));
	}
	/**
	 * nameCombo: with specific test context and state.
	 *		.itemCount : 16
	 * 		.itemText : {Trent Culpito,Susan Flontly,Emma Trenchenza,Claire Stratus,Rick Tumbler,Tony Mi ...
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Full Name:
	 * 		name : nameCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject nameCombo(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("nameCombo"), anchor, flags);
	}
	
	/**
	 * nameComboB: with default state.
	 *		.itemCount : 16
	 * 		.itemText : {Trent Culpito,Susan Flontly,Emma Trenchenza,Claire Stratus,Rick Tumbler,Tony Mi ...
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Full Name:
	 * 		name : nameComboB
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject nameComboB() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("nameComboB"));
	}
	/**
	 * nameComboB: with specific test context and state.
	 *		.itemCount : 16
	 * 		.itemText : {Trent Culpito,Susan Flontly,Emma Trenchenza,Claire Stratus,Rick Tumbler,Tony Mi ...
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Full Name:
	 * 		name : nameComboB
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject nameComboB(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("nameComboB"), anchor, flags);
	}
	
	/**
	 * NameText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Name:
	 * 		name : .nameField-cust
	 * 		.classIndex : 5
	 */
	protected TextGuiSubitemTestObject nameText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("nameText"));
	}
	/**
	 * NameText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Name:
	 * 		name : .nameField-cust
	 * 		.classIndex : 5
	 */
	protected TextGuiSubitemTestObject nameText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("nameText"), anchor, flags);
	}
	
	/**
	 * NewCustomer: with default state.
	 *		.roleIndex : 0
	 * 		.class : javax.swing.JRadioButton
	 * 		.priorLabel : Choose One: 
	 * 		accessibleContext.accessibleName : New Customer
	 * 		name : radioButtonA
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject newCustomer() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("newCustomer"));
	}
	/**
	 * NewCustomer: with specific test context and state.
	 *		.roleIndex : 0
	 * 		.class : javax.swing.JRadioButton
	 * 		.priorLabel : Choose One: 
	 * 		accessibleContext.accessibleName : New Customer
	 * 		name : radioButtonA
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject newCustomer(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("newCustomer"), anchor, flags);
	}
	
	/**
	 * No: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : No
	 * 		name : cancel-no
	 * 		.classIndex : 1
	 */
	protected GuiTestObject no() 
	{
		return new GuiTestObject(
                        getMappedTestObject("no"));
	}
	/**
	 * No: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : No
	 * 		name : cancel-no
	 * 		.classIndex : 1
	 */
	protected GuiTestObject no(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("no"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-statuslogon2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"));
	}
	/**
	 * OK: with specific test context and state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-statuslogon2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : but
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok3"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : but
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok3"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok4() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok4"));
	}
	/**
	 * OK: with specific test context and state.
	 *		text : OK
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok4(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok4"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok5() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok5"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok5(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok5"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok6() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok6"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok6(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok6"), anchor, flags);
	}
	
	/**
	 * OrderForTrentCulpito: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Order for Trent Culpito
	 * 		name : label-ordersfor
	 * 		.classIndex : 0
	 */
	protected GuiTestObject orderForTrentCulpito() 
	{
		return new GuiTestObject(
                        getMappedTestObject("orderForTrentCulpito"));
	}
	/**
	 * OrderForTrentCulpito: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Order for Trent Culpito
	 * 		name : label-ordersfor
	 * 		.classIndex : 0
	 */
	protected GuiTestObject orderForTrentCulpito(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("orderForTrentCulpito"), anchor, flags);
	}
	
	/**
	 * Password: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Password:
	 * 		name : passLabel
	 * 		.classIndex : 2
	 */
	protected GuiTestObject password() 
	{
		return new GuiTestObject(
                        getMappedTestObject("password"));
	}
	/**
	 * Password: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Password:
	 * 		name : passLabel
	 * 		.classIndex : 2
	 */
	protected GuiTestObject password(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("password"), anchor, flags);
	}
	
	/**
	 * Password: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Password:
	 * 		name : .passLabel-classicslogon
	 * 		.classIndex : 1
	 */
	protected GuiTestObject password2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("password2"));
	}
	/**
	 * Password: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Password:
	 * 		name : .passLabel-classicslogon
	 * 		.classIndex : 1
	 */
	protected GuiTestObject password2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("password2"), anchor, flags);
	}
	
	/**
	 * Password: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Password:
	 * 		name : passLabel2
	 * 		.classIndex : 2
	 */
	protected GuiTestObject password3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("password3"));
	}
	/**
	 * Password: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Password:
	 * 		name : passLabel2
	 * 		.classIndex : 2
	 */
	protected GuiTestObject password3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("password3"), anchor, flags);
	}
	
	/**
	 * PasswordText: with default state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText"));
	}
	/**
	 * PasswordText: with specific test context and state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText"), anchor, flags);
	}
	
	/**
	 * PasswordText: with default state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText-classicslogon
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText2() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText2"));
	}
	/**
	 * PasswordText: with specific test context and state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText-classicslogon
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText2(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText2"), anchor, flags);
	}
	
	/**
	 * PasswordText: with default state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText2
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText3() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText3"));
	}
	/**
	 * PasswordText: with specific test context and state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText2
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText3(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText3"), anchor, flags);
	}
	
	/**
	 * Phone: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Phone:
	 * 		name : phone
	 * 		.classIndex : 16
	 */
	protected GuiTestObject phone() 
	{
		return new GuiTestObject(
                        getMappedTestObject("phone"));
	}
	/**
	 * Phone: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Phone:
	 * 		name : phone
	 * 		.classIndex : 16
	 */
	protected GuiTestObject phone(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("phone"), anchor, flags);
	}
	
	/**
	 * PhoneText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Phone:
	 * 		name : .phoneField
	 * 		.classIndex : 8
	 */
	protected TextGuiSubitemTestObject phoneText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("phoneText"));
	}
	/**
	 * PhoneText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Phone:
	 * 		name : .phoneField
	 * 		.classIndex : 8
	 */
	protected TextGuiSubitemTestObject phoneText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("phoneText"), anchor, flags);
	}
	
	/**
	 * PlaceAnOrder: with default state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"));
	}
	/**
	 * PlaceAnOrder: with specific test context and state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"), anchor, flags);
	}
	
	/**
	 * PlaybackLogForClassicsJavaAMozil: with default state.
	 *		.text : Playback Log for ClassicsJavaA - Mozilla Firefox
	 * 		.class : MozillaWindowClass
	 * 		.processName : firefox.exe
	 */
	protected TopLevelSubitemTestObject playbackLogForClassicsJavaAMoz() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("playbackLogForClassicsJavaAMoz"));
	}
	/**
	 * PlaybackLogForClassicsJavaAMozil: with specific test context and state.
	 *		.text : Playback Log for ClassicsJavaA - Mozilla Firefox
	 * 		.class : MozillaWindowClass
	 * 		.processName : firefox.exe
	 */
	protected TopLevelSubitemTestObject playbackLogForClassicsJavaAMoz(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("playbackLogForClassicsJavaAMoz"), anchor, flags);
	}
	
	/**
	 * Quantity: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Quantity:
	 * 		name : quantity
	 * 		.classIndex : 5
	 */
	protected GuiTestObject quantity() 
	{
		return new GuiTestObject(
                        getMappedTestObject("quantity"));
	}
	/**
	 * Quantity: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Quantity:
	 * 		name : quantity
	 * 		.classIndex : 5
	 */
	protected GuiTestObject quantity(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("quantity"), anchor, flags);
	}
	
	/**
	 * QuantityText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Quantity:
	 * 		name : .quantityField
	 * 		.classIndex : 2
	 */
	protected TextGuiSubitemTestObject quantityText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("quantityText"));
	}
	/**
	 * QuantityText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Quantity:
	 * 		name : .quantityField
	 * 		.classIndex : 2
	 */
	protected TextGuiSubitemTestObject quantityText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("quantityText"), anchor, flags);
	}
	
	/**
	 * RelatedItems: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Related Items: 
	 * 		name : relatedLabel
	 * 		.classIndex : 3
	 */
	protected GuiTestObject relatedItems() 
	{
		return new GuiTestObject(
                        getMappedTestObject("relatedItems"));
	}
	/**
	 * RelatedItems: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Related Items: 
	 * 		name : relatedLabel
	 * 		.classIndex : 3
	 */
	protected GuiTestObject relatedItems(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("relatedItems"), anchor, flags);
	}
	
	/**
	 * RelatedItems: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Related Items
	 * 		name : relatedItems
	 * 		.classIndex : 0
	 */
	protected GuiTestObject relatedItems2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("relatedItems2"));
	}
	/**
	 * RelatedItems: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Related Items
	 * 		name : relatedItems
	 * 		.classIndex : 0
	 */
	protected GuiTestObject relatedItems2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("relatedItems2"), anchor, flags);
	}
	
	/**
	 * RememberPassword: with default state.
	 *		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Remember Password
	 * 		name : check
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword"));
	}
	/**
	 * RememberPassword: with specific test context and state.
	 *		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Remember Password
	 * 		name : check
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword"), anchor, flags);
	}
	
	/**
	 * RememberPassword: with default state.
	 *		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Remember Password
	 * 		name : check-rememberpassword2
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword2() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword2"));
	}
	/**
	 * RememberPassword: with specific test context and state.
	 *		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Remember Password
	 * 		name : check-rememberpassword2
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword2(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword2"), anchor, flags);
	}
	
	/**
	 * RememberPassword: with default state.
	 *		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Remember Password
	 * 		name : checkRemember
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword3() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword3"));
	}
	/**
	 * RememberPassword: with specific test context and state.
	 *		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Remember Password
	 * 		name : checkRemember
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword3(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword3"), anchor, flags);
	}
	
	/**
	 * SH: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : S&H: 
	 * 		name : shipLabel
	 * 		.classIndex : 6
	 */
	protected GuiTestObject sh() 
	{
		return new GuiTestObject(
                        getMappedTestObject("sh"));
	}
	/**
	 * SH: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : S&H: 
	 * 		name : shipLabel
	 * 		.classIndex : 6
	 */
	protected GuiTestObject sh(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("sh"), anchor, flags);
	}
	
	/**
	 * Street: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Street:
	 * 		name : street
	 * 		.classIndex : 14
	 */
	protected GuiTestObject street() 
	{
		return new GuiTestObject(
                        getMappedTestObject("street"));
	}
	/**
	 * Street: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Street:
	 * 		name : street
	 * 		.classIndex : 14
	 */
	protected GuiTestObject street(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("street"), anchor, flags);
	}
	
	/**
	 * StreetText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Street:
	 * 		name : .streetField
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject streetText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("streetText"));
	}
	/**
	 * StreetText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Street:
	 * 		name : .streetField
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject streetText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("streetText"), anchor, flags);
	}
	
	/**
	 * SubTotal: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Sub-Total: 
	 * 		name : subTotalLabel
	 * 		.classIndex : 1
	 */
	protected GuiTestObject subTotal() 
	{
		return new GuiTestObject(
                        getMappedTestObject("subTotal"));
	}
	/**
	 * SubTotal: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Sub-Total: 
	 * 		name : subTotalLabel
	 * 		.classIndex : 1
	 */
	protected GuiTestObject subTotal(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("subTotal"), anchor, flags);
	}
	
	/**
	 * tabbedPane: with default state.
	 *		tabCount : 2
	 * 		.class : javax.swing.JTabbedPane
	 * 		.tabs : {Album,Details}
	 * 		name : tabbedPane
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tabbedPane() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tabbedPane"));
	}
	/**
	 * tabbedPane: with specific test context and state.
	 *		tabCount : 2
	 * 		.class : javax.swing.JTabbedPane
	 * 		.tabs : {Album,Details}
	 * 		name : tabbedPane
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tabbedPane(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tabbedPane"), anchor, flags);
	}
	
	/**
	 * Total: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Total:
	 * 		name : total
	 * 		.classIndex : 8
	 */
	protected GuiTestObject total() 
	{
		return new GuiTestObject(
                        getMappedTestObject("total"));
	}
	/**
	 * Total: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Total:
	 * 		name : total
	 * 		.classIndex : 8
	 */
	protected GuiTestObject total(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("total"), anchor, flags);
	}
	
	/**
	 * tree2: with default state.
	 *		.class : javax.swing.JTree
	 * 		name : tree2
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tree2() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tree2"));
	}
	/**
	 * tree2: with specific test context and state.
	 *		.class : javax.swing.JTree
	 * 		name : tree2
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tree2(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tree2"), anchor, flags);
	}
	
	/**
	 * UserName: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : UserName:
	 * 		name : nameAdmin
	 * 		.classIndex : 0
	 */
	protected GuiTestObject userName() 
	{
		return new GuiTestObject(
                        getMappedTestObject("userName"));
	}
	/**
	 * UserName: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : UserName:
	 * 		name : nameAdmin
	 * 		.classIndex : 0
	 */
	protected GuiTestObject userName(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("userName"), anchor, flags);
	}
	
	/**
	 * ViewExistingOrders: with default state.
	 *		.captionText : View Existing Orders
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : View Existing Orders
	 * 		name : orderStatusForm
	 */
	protected TopLevelTestObject viewExistingOrders() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("viewExistingOrders"));
	}
	/**
	 * ViewExistingOrders: with specific test context and state.
	 *		.captionText : View Existing Orders
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : View Existing Orders
	 * 		name : orderStatusForm
	 */
	protected TopLevelTestObject viewExistingOrders(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("viewExistingOrders"), anchor, flags);
	}
	
	/**
	 * ViewOrderStatus: with default state.
	 *		.captionText : View Order Status
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : View Order Status
	 * 		name : logFrame2Status
	 */
	protected TopLevelTestObject viewOrderStatus() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("viewOrderStatus"));
	}
	/**
	 * ViewOrderStatus: with specific test context and state.
	 *		.captionText : View Order Status
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : View Order Status
	 * 		name : logFrame2Status
	 */
	protected TopLevelTestObject viewOrderStatus(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("viewOrderStatus"), anchor, flags);
	}
	
	/**
	 * YES: with default state.
	 *		.class : javax.swing.JButton
	 * 		.priorLabel : Are you sure you want to clear all customers and orders?  (Products info will no ...
	 * 		accessibleContext.accessibleName : YES
	 * 		name : ok-yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject yes() 
	{
		return new GuiTestObject(
                        getMappedTestObject("yes"));
	}
	/**
	 * YES: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		.priorLabel : Are you sure you want to clear all customers and orders?  (Products info will no ...
	 * 		accessibleContext.accessibleName : YES
	 * 		name : ok-yes
	 * 		.classIndex : 0
	 */
	protected GuiTestObject yes(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("yes"), anchor, flags);
	}
	
	/**
	 * YouMustCompleteTheOrderFormBefor: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : You must complete the order form before you can make a purchase.
	 * 		.classIndex : 0
	 */
	protected GuiTestObject youMustCompleteTheOrderFormBef() 
	{
		return new GuiTestObject(
                        getMappedTestObject("youMustCompleteTheOrderFormBef"));
	}
	/**
	 * YouMustCompleteTheOrderFormBefor: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : You must complete the order form before you can make a purchase.
	 * 		.classIndex : 0
	 */
	protected GuiTestObject youMustCompleteTheOrderFormBef(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("youMustCompleteTheOrderFormBef"), anchor, flags);
	}
	
	/**
	 * YouMustEnterBOTHACreditCardNumbe: with default state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : You must enter BOTH a Credit Card Number and Expiration Date
	 * 		.classIndex : 1
	 */
	protected GuiTestObject youMustEnterBOTHACreditCardNum() 
	{
		return new GuiTestObject(
                        getMappedTestObject("youMustEnterBOTHACreditCardNum"));
	}
	/**
	 * YouMustEnterBOTHACreditCardNumbe: with specific test context and state.
	 *		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : You must enter BOTH a Credit Card Number and Expiration Date
	 * 		.classIndex : 1
	 */
	protected GuiTestObject youMustEnterBOTHACreditCardNum(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("youMustEnterBOTHACreditCardNum"), anchor, flags);
	}
	
	/**
	 * Locate and return the verification point AboutClassicsCD object in the SUT.
	 */
	protected IFtVerificationPoint AboutClassicsCDVP() 
	{
		return vp("AboutClassicsCD");
	}
	protected IFtVerificationPoint AboutClassicsCDVP(TestObject anchor)
	{
		return vp("AboutClassicsCD", anchor);
	}
	
	/**
	 * Locate and return the verification point Administration object in the SUT.
	 */
	protected IFtVerificationPoint AdministrationVP() 
	{
		return vp("Administration");
	}
	protected IFtVerificationPoint AdministrationVP(TestObject anchor)
	{
		return vp("Administration", anchor);
	}
	
	/**
	 * Locate and return the verification point ClearData object in the SUT.
	 */
	protected IFtVerificationPoint ClearDataVP() 
	{
		return vp("ClearData");
	}
	protected IFtVerificationPoint ClearDataVP(TestObject anchor)
	{
		return vp("ClearData", anchor);
	}
	
	/**
	 * Locate and return the verification point IncompleteOrder object in the SUT.
	 */
	protected IFtVerificationPoint IncompleteOrderVP() 
	{
		return vp("IncompleteOrder");
	}
	protected IFtVerificationPoint IncompleteOrderVP(TestObject anchor)
	{
		return vp("IncompleteOrder", anchor);
	}
	
	/**
	 * Locate and return the verification point JDialog_standard object in the SUT.
	 */
	protected IFtVerificationPoint JDialog_standardVP() 
	{
		return vp("JDialog_standard");
	}
	protected IFtVerificationPoint JDialog_standardVP(TestObject anchor)
	{
		return vp("JDialog_standard", anchor);
	}
	
	/**
	 * Locate and return the verification point MainPage object in the SUT.
	 */
	protected IFtVerificationPoint MainPageVP() 
	{
		return vp("MainPage");
	}
	protected IFtVerificationPoint MainPageVP(TestObject anchor)
	{
		return vp("MainPage", anchor);
	}
	
	/**
	 * Locate and return the verification point MemberLogon object in the SUT.
	 */
	protected IFtVerificationPoint MemberLogonVP() 
	{
		return vp("MemberLogon");
	}
	protected IFtVerificationPoint MemberLogonVP(TestObject anchor)
	{
		return vp("MemberLogon", anchor);
	}
	
	/**
	 * Locate and return the verification point PlaceAnOrder object in the SUT.
	 */
	protected IFtVerificationPoint PlaceAnOrderVP() 
	{
		return vp("PlaceAnOrder");
	}
	protected IFtVerificationPoint PlaceAnOrderVP(TestObject anchor)
	{
		return vp("PlaceAnOrder", anchor);
	}
	
	/**
	 * Locate and return the verification point Splash object in the SUT.
	 */
	protected IFtVerificationPoint SplashVP() 
	{
		return vp("Splash");
	}
	protected IFtVerificationPoint SplashVP(TestObject anchor)
	{
		return vp("Splash", anchor);
	}
	
	/**
	 * Locate and return the verification point ViewExistingOrder object in the SUT.
	 */
	protected IFtVerificationPoint ViewExistingOrderVP() 
	{
		return vp("ViewExistingOrder");
	}
	protected IFtVerificationPoint ViewExistingOrderVP(TestObject anchor)
	{
		return vp("ViewExistingOrder", anchor);
	}
	
	/**
	 * Locate and return the verification point ViewOrderStatus object in the SUT.
	 */
	protected IFtVerificationPoint ViewOrderStatusVP() 
	{
		return vp("ViewOrderStatus");
	}
	protected IFtVerificationPoint ViewOrderStatusVP(TestObject anchor)
	{
		return vp("ViewOrderStatus", anchor);
	}
	
	/**
	 * Locate and return the verification point ViewOrderStatusLogin object in the SUT.
	 */
	protected IFtVerificationPoint ViewOrderStatusLoginVP() 
	{
		return vp("ViewOrderStatusLogin");
	}
	protected IFtVerificationPoint ViewOrderStatusLoginVP(TestObject anchor)
	{
		return vp("ViewOrderStatusLogin", anchor);
	}
	
	

	protected ClassicsJavaAHelper()
	{
		setScriptName("ClassicsJavaA");
	}
	
}